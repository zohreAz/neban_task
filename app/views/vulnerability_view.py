from schemas.vulnerability import Vulnerability
from services.vulnerability_service import VulnerabilityService
from sentence_transformers import SentenceTransformer
from fastapi import Depends, APIRouter, HTTPException
from typing import List

router = APIRouter()

def get_vulnerability_service() -> VulnerabilityService:
    model = SentenceTransformer('all-MiniLM-L6-v2', device='cpu')
    db_config = {
        "dbname": "task_db",
        "user": "postgres",
        "password": "pass",
        "host": "localhost",
        "port": "5432"
    }
    return VulnerabilityService(db_config, model)

@router.get("/vulnerabilities", response_model=List[Vulnerability])
async def get_vulnerabilities(vulnerability_service: VulnerabilityService = Depends(get_vulnerability_service)):
    try:
        results = vulnerability_service.fetch_similar_vulnerabilities()
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")

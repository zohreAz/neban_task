from collections import defaultdict
from sklearn.metrics.pairwise import cosine_similarity

class VulnerabilityProcessor:
    SIMILARITY_THRESHOLD = 0.8

    def __init__(self, model):
        self.model = model

    def fetch_all_vulnerabilities(self, conn):

        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT title, endpoint, cve, description, severity, sensor
                FROM vuln
            """)
            rows = cursor.fetchall()
        return rows

    def group_by_endpoint(self, vulnerabilities):

        endpoint_groups = defaultdict(list)
        for vuln in vulnerabilities:
            title, endpoint, cve, description, severity, sensor = vuln
            endpoint_groups[endpoint].append({
                "title": title,
                "endpoint": endpoint,
                "cve": cve,
                "description": description,
                "severity": severity,
                "sensor": sensor
            })
        return endpoint_groups

    def group_by_cve(self, endpoint_group):
      cve_groups = defaultdict(list)
      for vuln in endpoint_group:
          cve_groups[vuln['cve']].append(vuln)

      return cve_groups

    def compute_similarity_groups(self, endpoint_group):

        cve_groups = self.group_by_cve(endpoint_group)
        descriptions = [f"{vuln['title']} {vuln['description']}" for vuln in endpoint_group]
        embeddings = self.model.encode(descriptions, convert_to_tensor=True)
        similarity_matrix = cosine_similarity(embeddings)

        return self.group_similar_vulnerabilities(endpoint_group, similarity_matrix, cve_groups)


    def group_similar_vulnerabilities(self, vulnerabilities, similarity_matrix, cve_groups):

        visited = [False] * len(vulnerabilities)
        grouped = []
        for cve, group in cve_groups.items():
            grouped.append(group)
            for vuln in group:
                visited[vulnerabilities.index(vuln)] = True

        for i in range(len(vulnerabilities)):
            if visited[i]:
                continue

            current_group = [vulnerabilities[i]]
            visited[i] = True

            for j in range(i + 1, len(vulnerabilities)):
                if visited[j]:
                    continue

                if (similarity_matrix[i][j] >= self.SIMILARITY_THRESHOLD and
                        (vulnerabilities[i]['cve'] == vulnerabilities[j]['cve'] or
                        vulnerabilities[i]['cve'] is None or
                        vulnerabilities[j]['cve'] is None)):
                    current_group.append(vulnerabilities[j])
                    visited[j] = True

            grouped.append(current_group)

        return grouped

    # def are_vulnerabilities_similar(self, i, j, similarity_matrix, vulnerabilities):
    #     return (similarity_matrix[i][j] >= self.SIMILARITY_THRESHOLD and
    #             (vulnerabilities[i]['cve'] == vulnerabilities[j]['cve'] or
    #              vulnerabilities[i]['cve'] is None or
    #              vulnerabilities[j]['cve'] is None))

    def assign_tags(self, grouped_vulnerabilities):
        tagged_output = []
        group_count = 1

        for group in grouped_vulnerabilities:
            for vuln in group:
                vuln["tag"] = f"group_{group_count}"
                tagged_output.append(vuln)
            group_count += 1

        return tagged_output
